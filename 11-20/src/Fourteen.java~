/*
he following iterative sequence is defined for the set of positive integers:

n -> n/2 (n is even)
n -> 3n + 1 (n is odd)

Using the rule above and starting with 13, we generate the following sequence:

13 -> 40 -> 20 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1
It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. 
Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.

Which starting number, under one million, produces the longest chain?
*/

import java.util.*; 

public class Fourteen 
{	
	int _longestLength = 0; 
	int _collatzNum = 0; 
	
	public Fourteen()
	{
		int newLength = 0; 
		for (int i = 0; i <= 13; i++){
			int thisLength = GetChainLength(i);
			if (thisLength > _longestLength){
				_longestLength = thisLength; 
				_collatzNum = i; 
			}
		}
	}
	
	private int GetChainLength(int collatzNum)
	{
		int length = 1; 
		while (collatzNum != 1)
		{
			if ((collatzNum&1) == 1){ // Odd
				collatzNum = collatzNum * 3 + 1; 
				length++; 
			}
			else{ // Even
				collatzNum = collatzNum >> 1; 
				length++; 
			}
			System.out.println("New Num: " + collatzNum); 
		}
		return length; 
	}
	
	public int getAnswer(){
		return _collatzNum; 
	}
	
	public int getLength(){
		return _longestLength; 
	}
	
	
	public static void main(String args[]){
		Fourteen f = new Fourteen();
		
		System.out.println("The longest chain is produced by " + f.getAnswer() + " with length of " +f.getLength() +".");
	}
}

