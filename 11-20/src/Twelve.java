/*The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

public class Twelve 
{	
	private int triangleNumber; 
	
	public Twelve(int numDivisors)
	{
		int naturalNumberAddedTo = 1;
		triangleNumber = getTriangleNumber(naturalNumberAddedTo);

		while (true){
			int divisors = GetNumberOfDivisors(triangleNumber); 
			if (divisors >= numDivisors)
				break;
			naturalNumberAddedTo++; 
			triangleNumber = getTriangleNumber(naturalNumberAddedTo, triangleNumber); 
		}
	}

	private int GetNumberOfDivisors(int triangleNum){
		int divisors = 0;
		int approxSquare = (int)Math.sqrt(triangleNum);
		for (int i = 1; i <= approxSquare; i++)
			if (triangleNum % i == 0)
				divisors++; 
		return (divisors*2); 
	}
	
	public int get_Number()
	{
		return triangleNumber;
	}

	private int getTriangleNumber(int numToAddTo)
	{
		int val = 0; 
		for (int i = 1; i <= numToAddTo; i++){
			val += i; 
		}
		return val; 
	}
	
	private int getTriangleNumber(int numToAddTo, int previousTriangleNumber)
	{
		return previousTriangleNumber + numToAddTo; 
	}

	
	public static void main(String args[]){
		int numberOfDivisors = 500;
		Twelve CC = new Twelve(numberOfDivisors);
		
		System.out.println("The first triangle number to have " + numberOfDivisors + " divisors is " + CC.get_Number());
	}
}

